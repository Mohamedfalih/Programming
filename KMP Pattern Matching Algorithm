QUESTION:

Write a program for implementing Rabin–Karp and Knuth–Morris–Pratt Pattern Matching algorithms.
Input:
Text: ababcabcabababd
Pattern: ababd
KMP Result:
Pattern found at indices: [10]

Analyze the time complexity of each algorithm and display the comparison in a table format.


SOURCE CODE: [C++]

#include<bits/stdc++.h>    //this header file support all file in C++
using namespace std;
#define d 256  // Number of characters in input 
#define q 101  // A prime number for hashing 


void computeLPSArray(char *pattern, int M, int *lps) {
    int length = 0;
    lps[0] = 0;
    int i = 1;

    while (i < M)
    {
        if (pattern[i] == pattern[length])
        {
            length++;
            lps[i] = length;
            i++;
        }
        else
        {
            if (length != 0)
                length = lps[length - 1];
            else 
            {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// KMP Algorithm
void KMPSearch(char *text, char *pattern)
{
    int M = strlen(pattern);
    int N = strlen(text);

    int lps[M];
    computeLPSArray(pattern, M, lps);

    int i = 0;
    int j = 0;
    int result = 0;

    cout<<"KMP Result:\nPattern found at indices: [";

    while (i < N)
    {
        if (pattern[j] == text[i])
        {
            j++;
            i++;
        }

        if (j == M)
        {
            if (result)
                cout<<", ";
            cout<<i - j;
            result = 1;
            
            j = lps[j - 1];
            
        }
        else if (i < N && pattern[j] != text[i])
        {
            if (j != 0)
                j = lps[j - 1];
            else
                i++;
        }
    }

    cout<<"]\n\n";
}

 int main()
 {
    char text[] = "ababcabcabababd";
    char pattern[] = "ababd";
    
    cout<<"-------Input--------\nText: "<<text<<"\nPattern: "<<pattern<<"\n\n";   //showing the Input
    

    
    KMPSearch(text, pattern);   //calling the KMPSearch function
    
    cout<<"Time Complexity of KMP pattern matching:\n";
    
    cout<<" ___________________________________\n";
    cout<<"|Algorithm  | Best case | Worst case |\n";
    cout<<"|___________|___________|____________|\n";
    cout<<"|           |           |            |\n";
    cout<<"|KMP pattern| O(n + m)  | O(n + m)   |\n";
    cout<<"|  matching |           |            |\n";
    cout<<"|___________|___________|____________|\n";
    
    return 0;
 }

OUTPUT:

-------Input--------
Text: ababcabcabababd
Pattern: ababd


------Rabin-Karp result------
 Pattren is found at indices [10]

Time Complexity of Rabin-Karp:
 ___________________________________
|Algorithm | Best case | Worst case |
|__________|___________|____________|
|          |           |            |
|Rabin-Karp| O(n + m)  | O(n * m)   |
|          |           |            |
|__________|___________|____________|
