QUESTION:

Write a program for implementing Rabin–Karp and Knuth–Morris–Pratt Pattern Matching algorithms.
Input:
Text: ababcabcabababd
Pattern: ababd
Output:
Rabin-Karp Result:
Pattern found at indices: [10]

Analyze the time complexity of each algorithm and display the comparison in a table format.
      
SOURCE CODE: [C++]

 #include<bits/stdc++.h>    //this header file support all file in C++
 using namespace std;
 #define d 256  // Number of characters in input 
 #define q 101  // A prime number for hashing 
 
 int rabinKarp(char *text,char *pattern)
 {
    int n = strlen(text);
    int m = strlen(pattern);
    int i,j;
    int p=0,t=0,h=1;
    int result = 0;
    
    for(i=0;i<m-1;i++)
        h = (h*d)%q;
    
    for(i=0;i<m;i++)
    {
        p=(d * p + pattern[i]) % q;
        t=(d * t + text[i]) % q;
    }
    
    cout<<"\n------Rabin-Karp result------"<<"\n Pattren is found at indices [";
    
    for(i = 0 ; i <= n-m ; i++)
    {
        if(p == t)
        {
            for(j = 0 ; j < m ; j++)
            {
                if(text[i + j] != pattern[j])
                    break;
            }
            
            if(j==m)
            {
                if(result)
                    cout<<",";
                cout<<i;
                result=1;
            }
        }
        if(i < n-m)
        {
            t = (d * (t - text[i] * h) + text[i + m]) % q;
            if(t < 0)
                t = (t + q);
        }
        
    }
    cout<<"]\n\n";
    return 0;
 }
 int main()
 {
    char text[] = "ababcabcabababd";
    char pattern[] = "ababd";
    
    cout<<"-------Input--------\nText: "<<text<<"\nPattern: "<<pattern<<"\n\n";   //showing the Input
    
    rabinKarp(text, pattern);   //calling the rabinKarp function
cout<<"Time Complexity of Rabin-Karp:\n";
    
    cout<<" ___________________________________\n";
    cout<<"|Algorithm | Best case | Worst case |\n";
    cout<<"|__________|___________|____________|\n";
    cout<<"|          |           |            |\n";
    cout<<"|Rabin-Karp| O(n + m)  | O(n * m)   |\n";
    cout<<"|          |           |            |\n";
    cout<<"|__________|___________|____________|\n";

   return 0;
 }

OUTPUT:

-------Input--------
Text: ababcabcabababd
Pattern: ababd


------Rabin-Karp result------
 Pattren is found at indices [10]

Time Complexity of Rabin-Karp:
 ___________________________________
|Algorithm | Best case | Worst case |
|__________|___________|____________|
|          |           |            |
|Rabin-Karp| O(n + m)  | O(n * m)   |
|          |           |            |
|__________|___________|____________|
